# 문제
# 셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.

# 양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다. 

# 예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다. 이런식으로 다음과 같은 수열을 만들 수 있다.

# 33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...

# n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다. 생성자가 한 개보다 많은 경우도 있다. 예를 들어, 101은 생성자가 2개(91과 100) 있다. 

# 생성자가 없는 숫자를 셀프 넘버라고 한다. 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97

# 10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.

# 입력
# 입력은 없다.

# 출력
# 10,000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 증가하는 순서로 출력한다.

# function 정의
def d(n):
    # 자기 자신을 우선 결과값에 저장
    result = n
    # while문 통해 각 자리수를 모두 더해주기
    while n > 0:
        # n을 10으로 나눈 나머지(=일의 자리 수)를 더해주기
        remainder = n % 10
        result += remainder
        # 10으로 나눈 몫(=일의 자리 수를 제외한 십의 자리수까지만)으로 n을 초기화
        n = n // 10

    return result

# 1부터 10000까지의 숫자가 있는 self number set
self_numbers = set(range(1, 10001))
# self number가 아닌 숫자들을 담을 normal_numbers set
normal_numbers = set()

for i in range(10000):
    # 1부터 10000까지를 함수 d()의 인자값으로 넣어, 결과 값을 normal_numbers 에 넣어준다. 10000을 초과하긴 하지만, 미미한 정도
    normal_numbers.add(d(i))

# set 자료형의 특성을 이용하여, 차집합을 구한다. 즉, self numbes set 에는 self number 들만 남게 된다.
self_numbers = self_numbers - normal_numbers

for self_number in sorted(self_numbers):
    print(self_number)
